<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Item;
use AppBundle\Entity\Match;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
    /**
     * Returns array of items that matches these conditions:
     * 1. Item owner is in same location as current user
     * 2. Item is available for trade (status = active)
     * 3. Item owner is not current user
     * 4. Item is in tradable item's categories list
     * 5. Item value matches tradable item's value with margin
     * 6. Item is not rejected by tradable item
     * 7. Item is not in the list of tradable item proposed match offers
     * 8. Item is not in the list of tradable item received match offers
     *
     * @param Item $item
     * @param User $user
     * @param int $margin
     * @param int $limit
     *
     * @return array
     */

    public function findAvailableMatches(Item $item, User $user, int $margin, int $limit): array
    {
        $items = $this
            ->createQueryBuilder('i')
            ->select([ 'i.id' ])
            ->leftJoin('i.user', 'iu')
            ->leftJoin('i.matchesOwnItem', 'imo', Expr\Join::WITH, 'imo.status != :status_rejected')
            ->leftJoin('i.matchesResponseItem', 'imr')
            ->where('iu.location = :location')
            ->andWhere('i.status = :status_active')
            ->andWhere('iu.id != :id')
            ->andWhere('i.category IN (:categories)')
            ->andWhere('i.value >= :min_value')
            ->andWhere('i.value <= :max_value')
            ->andWhere('imo.itemOwner IS NULL')
            ->andWhere('imr.itemRespondent IS NULL')
            ->setParameters([
                'location' => $user->getLocation(),
                'status_active' => Item::STATUS_ACTIVE,
                'id' => $user->getId(),
                'min_value' => $item->getValue() - $margin,
                'max_value' => $item->getValue() + $margin,
                'categories' => $item->getCategoriesToMatchArray(),
                'status_rejected' => Match::STATUS_REJECTED,
            ])->getQuery()
            ->getScalarResult();

        if (count($items) === 0) {
            return [ ];
        }

        $ids = array_map(function ($n) {
            return (int) $n[ 'id' ];
        }, $items);

        shuffle($ids);

        return $this
            ->createQueryBuilder('i')
            ->select([
                'i',
                'FIELD(i.id, '.implode(', ', $ids).') as HIDDEN field',
            ])
            ->where('i.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->setMaxResults($limit)
            ->orderBy('field')
            ->getQuery()
            ->getResult();
    }
}
