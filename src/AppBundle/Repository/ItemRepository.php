<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Item;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
    public function findAvailableMatches(Item $item, User $user, int $margin, int $limit): array
    {
        $items = $this
            ->createQueryBuilder('i')
            ->select(['i.id'])
            ->leftJoin('i.user', 'iu')
            ->where('iu.location = :location')
            ->andWhere('iu.id != :id')
            ->andWhere('i.category IN (:categories)')
            ->andWhere('i.value >= :min_value')
            ->andWhere('i.value <= :max_value')
            ->setParameters([
                'location' => $user->getLocation(),
                'id' => $user->getId(),
                'min_value' => $item->getValue() - $margin,
                'max_value' => $item->getValue() + $margin,
                'categories' => $item->getCategoriesToMatchArray(),
            ])->getQuery()
            ->getScalarResult();

        if (count($items) === 0) {
            return [];
        }

        $ids = array_map(function ($n) {
            return (int)$n['id'];
        }, $items);

        shuffle($ids);

        return $this
            ->createQueryBuilder('i')
            ->select([
                'i',
                'FIELD(i.id, ' . implode(', ', $ids) . ') as HIDDEN field',
            ])
            ->where('i.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->setMaxResults($limit)
            ->orderBy('field')
            ->getQuery()
            ->getResult();
    }
}
